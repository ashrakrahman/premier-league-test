{"version":3,"sources":["component/OperatorList/index.tsx","component/Nav/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["OperatorList","props","handleTeamInfo","event","teamId","target","id","toString","split","handleShow","setState","selectedTeam","show","handleClose","assignTeamInfo","teamInfoList","element","name","push","key","played","win","lose","draw","updateTeamInfo","index","temp","state","data","teamInfo","axios","get","headers","then","response","rounds","catch","error","console","log","matchDayList","this","matchList","muiMatchList","teamList","i","length","matches","forEach","score","info","arr","date","score1","score2","team1","teamKey1","team2","teamKey2","some","item","_","findIndex","indexWinningTeam","indexLosingTeam","indexDrawTeam1","indexDrawTeam2","columns","options","filter","sort","empty","customBodyRenderLite","dataIndex","rowIndex","Button","outline","size","onClick","color","seletedTeamInfo","Row","style","marginBottom","Col","sm","order","offset","title","selectableRows","Modal","onHide","Header","closeButton","Title","Body","Table","bordered","scope","Footer","React","NavBar","isOpen","toggle","bind","Navbar","dark","className","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","exact","path","component","Component","footerStyle","position","backgroundColor","fontSize","borderTop","textAlign","padding","left","bottom","height","width","textColor","baseStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.63033a4e.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Row, Col, Button, Table } from \"reactstrap\";\nimport axios from \"axios\";\nimport MUIDataTable from \"mui-datatables\";\nimport _ from \"lodash\";\nimport Modal from \"react-bootstrap/Modal\";\n\nexport interface OperatorListProps {}\n\nexport interface OperatorListState {\n  data: any;\n  show: boolean;\n  selectedTeam: any | null;\n  teamInfo: any;\n}\n\nclass OperatorList extends React.Component<\n  OperatorListProps,\n  OperatorListState\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      data: [],\n      show: false,\n      selectedTeam: null,\n      teamInfo: null\n    };\n  }\n\n  private handleTeamInfo = (event: any) => {\n    const teamId = event.target.id.toString().split(\"_\")[1];\n    this.handleShow();\n    this.setState({ selectedTeam: teamId });\n  };\n\n  public handleShow = () => {\n    this.setState({ show: true });\n  };\n\n  public handleClose = () => {\n    this.setState({ show: false, selectedTeam: null });\n  };\n\n  private assignTeamInfo = (teamInfoList: any, element: any, name: any) => {\n    teamInfoList.push({\n      key: element,\n      name: name,\n      played: 1,\n      win: 0,\n      lose: 0,\n      draw: 0\n    });\n  };\n\n  private updateTeamInfo = (\n    index: number,\n    teamInfoList: any,\n    element: any,\n    name: any\n  ) => {\n    let temp = teamInfoList[index];\n    teamInfoList[index] = {\n      key: element,\n      name: name,\n      played: temp.played + 1,\n      win: 0,\n      lose: 0,\n      draw: 0\n    };\n  };\n\n  public async componentDidMount() {\n    await axios\n      .get(\n        \"https://raw.githubusercontent.com/openfootball/football.json/master/2015-16/en.1.json\",\n        {\n          headers: {}\n        }\n      )\n      .then(response => {\n        this.setState({ data: response.data.rounds || [] });\n      })\n      .catch(error => {\n        if (error.response) {\n          console.log(error.response);\n        }\n      });\n  }\n\n  render() {\n    const matchDayList: any = this.state.data;\n    const matchList: any = [];\n    const muiMatchList: any = [];\n    const teamList: any = [];\n    let teamInfoList: any = [];\n\n    // Get all Match list from match day list\n    for (let i = 0; i < matchDayList.length; i++) {\n      matchDayList[i].matches.forEach((element: any) => {\n        matchList.push(element);\n      });\n    }\n\n    // Get all team list and mui datatable list from match list\n    matchList.forEach((element: any) => {\n      let arr: any = [];\n      let score: any;\n      let info: any;\n      arr.push(element.date);\n      score = element.score1 + \" - \" + element.score2;\n      info = {\n        team1: element.team1.name,\n        teamKey1: element.team1.key,\n        team2: element.team2.name,\n        teamKey2: element.team2.key\n      };\n      teamList.push(info);\n      arr.push(score);\n      muiMatchList.push(arr);\n\n      if (teamInfoList.some((item: any) => item.key === element.team1.key)) {\n        const index = _.findIndex(teamInfoList, function (teamInfo: any) {\n          return teamInfo.key === element.team1.key;\n        });\n        this.updateTeamInfo(\n          index,\n          teamInfoList,\n          element.team1.key,\n          element.team1.name\n        );\n      } else {\n        this.assignTeamInfo(\n          teamInfoList,\n          element.team1.key,\n          element.team1.name\n        );\n      }\n\n      if (teamInfoList.some((item: any) => item.key === element.team2.key)) {\n        const index = _.findIndex(teamInfoList, function (teamInfo: any) {\n          return teamInfo.key === element.team2.key;\n        });\n        this.updateTeamInfo(\n          index,\n          teamInfoList,\n          element.team2.key,\n          element.team2.name\n        );\n      } else {\n        this.assignTeamInfo(\n          teamInfoList,\n          element.team2.key,\n          element.team2.name\n        );\n      }\n    });\n\n    matchList.forEach((element: any) => {\n      if (element.score1 > element.score2) {\n        const indexWinningTeam = _.findIndex(teamInfoList, {\n          key: element.team1.key\n        });\n        teamInfoList[indexWinningTeam].win =\n          teamInfoList[indexWinningTeam].win + 1;\n        const indexLosingTeam = _.findIndex(teamInfoList, {\n          key: element.team2.key\n        });\n        teamInfoList[indexLosingTeam].lose =\n          teamInfoList[indexLosingTeam].lose + 1;\n      } else if (element.score1 < element.score2) {\n        const indexWinningTeam = _.findIndex(teamInfoList, {\n          key: element.team2.key\n        });\n        teamInfoList[indexWinningTeam].win =\n          teamInfoList[indexWinningTeam].win + 1;\n        const indexLosingTeam = _.findIndex(teamInfoList, {\n          key: element.team1.key\n        });\n        teamInfoList[indexLosingTeam].lose =\n          teamInfoList[indexLosingTeam].lose + 1;\n      } else {\n        const indexDrawTeam1 = _.findIndex(teamInfoList, {\n          key: element.team1.key\n        });\n        const indexDrawTeam2 = _.findIndex(teamInfoList, {\n          key: element.team2.key\n        });\n        teamInfoList[indexDrawTeam1].draw =\n          teamInfoList[indexDrawTeam1].draw + 1;\n        teamInfoList[indexDrawTeam2].draw =\n          teamInfoList[indexDrawTeam2].draw + 1;\n      }\n    });\n\n    const columns = [\n      \"Date\",\n      {\n        name: \"Assign\",\n        options: {\n          filter: false,\n          sort: false,\n          empty: true,\n          customBodyRenderLite: (dataIndex: any, rowIndex: any) => {\n            return (\n              <div>\n                <Button\n                  outline\n                  size=\"sm\"\n                  id={rowIndex + \"_\" + teamList[rowIndex].teamKey1}\n                  onClick={this.handleTeamInfo}\n                >\n                  {teamList[rowIndex].team1}\n                </Button>{\" \"}\n                <Button color=\"secondary\" size=\"sm\">\n                  vs\n                </Button>{\" \"}\n                <Button\n                  outline\n                  size=\"sm\"\n                  id={rowIndex + \"_\" + teamList[rowIndex].teamKey2}\n                  onClick={this.handleTeamInfo}\n                >\n                  {teamList[rowIndex].team2}\n                </Button>\n              </div>\n            );\n          }\n        }\n      },\n      \"Score\"\n    ];\n\n    if (teamInfoList.length > 0 && this.state.teamInfo === null) {\n      this.setState({ teamInfo: teamInfoList });\n    }\n\n    let seletedTeamInfo = [];\n    if (this.state.selectedTeam) {\n      const index = _.findIndex(teamInfoList, {\n        key: this.state.selectedTeam\n      });\n      seletedTeamInfo = teamInfoList[index];\n    }\n\n    //console.log(seletedTeamInfo);\n\n    return (\n      <Row style={{ marginBottom: \"150px\" }}>\n        <Col sm={{ size: 8, order: 2, offset: 2 }}>\n          <br></br>\n          <MUIDataTable\n            title={\"Match List Table\"}\n            data={muiMatchList}\n            columns={columns}\n            options={{\n              selectableRows: \"none\"\n            }}\n          />\n\n          <Modal show={this.state.show} onHide={this.handleClose}>\n            <Modal.Header closeButton>\n              <Modal.Title>\n                <strong> {seletedTeamInfo.name} </strong>{\" \"}\n              </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              {\" \"}\n              <Table bordered>\n                <thead>\n                  <tr>\n                    <th>Played</th>\n                    <th>Win</th>\n                    <th>Lose</th>\n                    <th>Draw</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <th scope=\"row\">{seletedTeamInfo.played}</th>\n                    <td>{seletedTeamInfo.win}</td>\n                    <td>{seletedTeamInfo.lose}</td>\n                    <td>{seletedTeamInfo.draw}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button color=\"secondary\" onClick={this.handleClose}>\n                Close\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default OperatorList;\n","import React from \"react\";\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav } from \"reactstrap\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport OperatorList from \"../OperatorList\";\n\ninterface NavProps {}\n\ninterface NavBarState {\n  isOpen: boolean;\n}\n\nclass NavBar extends React.Component<NavProps, NavBarState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  public componentDidMount() {}\n\n  render() {\n    return (\n      <Router>\n        <Navbar\n          color=\"dark\"\n          dark\n          className=\"justify-content-between\"\n          expand=\"md\"\n        >\n          <NavbarBrand href=\"/premier-league-test/#/\">\n            Premier League 2015-16\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar></Nav>\n          </Collapse>\n        </Navbar>\n        <Switch>\n          {/* Forward Public Routes to the Home Page */}\n          <Route exact path=\"/\" component={OperatorList} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./component/Nav\";\n\nconst footerStyle = {\n  position: \"absolute\",\n  backgroundColor: \"#f5f5f5\",\n  fontSize: \"20px\",\n  color: \"white\",\n  borderTop: \"1px solid #E7E7E7\",\n  textAlign: \"center\",\n  padding: \"15px\",\n  left: \"0\",\n  bottom: \"0\",\n  height: \"100%\",\n  width: \"100%\",\n  textColor: \"black\"\n} as React.CSSProperties;\n\nconst baseStyle = {\n  position: \"fixed\",\n  left: \"0\",\n  bottom: \"0\",\n  width: \"100%\",\n  height: \"45px\"\n} as React.CSSProperties;\n\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <div className={\"root\"} key=\"1\">\n        <NavBar />\n        <div style={baseStyle} className=\"footer\">\n          <div style={footerStyle}>\n            <p style={{ color: \"grey\", fontSize: \"12px\" }}>\n              © 2020 Copyright : Premier League 2015-16\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}